/* eslint-disable @typescript-eslint/no-unused-expressions */
import fs from "node:fs"
import process from "process"

import builtins from "builtin-modules"
import esbuild from "esbuild"

const banner
= `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

const StyleLoader = {
    name: "inline-style",
    setup({ onLoad }) {
        var template = css =>
            `typeof document<'u'&&`
            + `document.head.appendChild(document.createElement('style'))`
            + `.appendChild(document.createTextNode(${JSON.stringify(css)}))`
        onLoad({ filter: /\.css$/ }, async (args) => {
            let css = await fs.promises.readFile(args.path, "utf8")
            return { contents: template(css) }
        }),
        onLoad({ filter: /\.module.css$/ }, async (args) => {
            let css = await fs.promises.readFile(args.path, "utf8")
            console.log(css)
            return { contents: template(css) }
        })
    }
}

const prod = (process.argv[2] === "production")

const context = await esbuild.context({
    jsxFactory: "React.createElement",
    jsxFragment: "React.Fragment",
    banner: {
        js: banner
    },
    entryPoints: ["src/plugin.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "dist/main.js",
    minify: prod,
    plugins: [
        StyleLoader
    ]

})

if (prod) {
    await context.rebuild()
    process.exit(0)
}
else {
    await context.watch()
}
