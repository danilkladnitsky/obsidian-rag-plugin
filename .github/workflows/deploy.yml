name: Deploy App

on:
  push:
    branches:
      - main

jobs:
  check-frontend:
    name: Lint frontend code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: cd frontend && npm install --legacy-peer-deps

      - name: Lint code
        run: cd frontend && npm run lint

  build-service:
    needs: [check-frontend]
    name: Build service
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_LLM_API_KEY: ${{ secrets.AI_TUNNEL_KEY }}
          file_name: .env
          fail_on_empty: false

      - name: Stop service
        run: docker compose -f docker-compose.yml --env-file .env down

      - name: Build service
        run: docker compose -f docker-compose.yml --env-file .env build

      - name: Start service
        run: docker compose -f docker-compose.yml --env-file .env up --force-recreate -d

  compile-plugin:
    needs: [check-frontend]
    name: Compile plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: cd frontend && npm install --legacy-peer-deps

      - name: Compile Obsidian plugin
        run: |
          cd frontend
          npm run build

          cp manifest.json dist/manifest.json

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: obsidian-rag-plugin
          path: frontend/dist

      - name: Release on GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release create ${{ github.ref_name }}
          "obsidian-rag-plugin.zip"
          --generate-notes
          --title "Version ${{ github.ref_name }}"